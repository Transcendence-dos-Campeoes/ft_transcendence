services:
    db:
        image: postgres:15
        restart: always
        env_file:
            - ./.env
        volumes:
            - ./Database:/var/lib/postgresql/data/

    backend:
        build: ./Backend
        env_file:
            - ./.env
        volumes:
            - ./Backend:/usr/src/app/
            - ./Contracts:/usr/src/contracts/
        depends_on:
            - db
            - redis

    frontend:
        build: ./Frontend
        volumes:
            - ./Frontend:/var/www/html
        depends_on:
            - db
            - backend

    server:
        ports:
            - 4000:443
        expose:
            - 443
        build: ./Server
        env_file:
            - ./.env
        restart: on-failure
        depends_on:
            - backend
            - frontend

    redis:
        image: redis:5
        restart: always

    blockchain:
        build: ./Contracts
        volumes:
            - ./Contracts:/usr/src/contracts
        env_file:
            - ./.env

    prometheus:
        image: prom/prometheus
        volumes:
            - ./Prometheus:/etc/prometheus
            - ./Prometheus/data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--storage.tsdb.retention.time=30d'
        restart: always

    grafana:
        image: grafana/grafana
        ports:
            - "3000:3000"
        depends_on:
            - prometheus
        env_file:
            - ./.env
        volumes:
            - ./Grafana/dashboards:/var/lib/grafana/dashboards
            - ./Grafana/provisioning:/etc/grafana/provisioning:ro
        restart: always

    alertmanager:
        image: prom/alertmanager
        env_file:
            - ./.env
        volumes:
            - ./Alertmanager/config:/etc/alertmanager
        command:
            - "--config.file=/etc/alertmanager/alertmanager.yml"
        restart: always

    node-exporter:
        image: prom/node-exporter
        container_name: node-exporter
        restart: always
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - "--path.procfs=/host/proc"
            - "--path.sysfs=/host/sys"
            - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"

    postgres-exporter:
        image: wrouesnel/postgres_exporter
        env_file:
            - ./.env
        restart: always
        depends_on:
            - db
